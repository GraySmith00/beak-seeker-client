// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`HotspotsList component should match the snapshot when the data is has been populated 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <HotspotsList
    getNearbyHotspots={[Function]}
    hotspots={
        Array [
            Object {
              "birds": Array [
                Object {
                  "comName": "Canada Goose",
                  "howMany": 10,
                  "lat": 39.7044793,
                  "lng": -105.0857735,
                  "locId": "L1743685",
                  "locName": "Belmar Park",
                  "locationPrivate": false,
                  "obsDt": "2018-09-09 12:15",
                  "obsReviewed": false,
                  "obsValid": true,
                  "sciName": "Branta canadensis",
                  "speciesCode": "cangoo",
                },
                Object {
                  "comName": "Graylag Goose (Domestic type) x Canada Goose (hybrid)",
                  "howMany": 1,
                  "lat": 39.7044793,
                  "lng": -105.0857735,
                  "locId": "L1743685",
                  "locName": "Belmar Park",
                  "locationPrivate": false,
                  "obsDt": "2018-09-09 12:15",
                  "obsReviewed": false,
                  "obsValid": true,
                  "sciName": "Anser anser (Domestic type) x Branta canadensis",
                  "speciesCode": "gragoo4",
                },
                Object {
                  "comName": "Mallard",
                  "howMany": 14,
                  "lat": 39.7044793,
                  "lng": -105.0857735,
                  "locId": "L1743685",
                  "locName": "Belmar Park",
                  "locationPrivate": false,
                  "obsDt": "2018-09-09 12:15",
                  "obsReviewed": false,
                  "obsValid": true,
                  "sciName": "Anas platyrhynchos",
                  "speciesCode": "mallar3",
                },
                Object {
                  "comName": "Ring-billed Gull",
                  "howMany": 2,
                  "lat": 39.7044793,
                  "lng": -105.0857735,
                  "locId": "L1743685",
                  "locName": "Belmar Park",
                  "locationPrivate": false,
                  "obsDt": "2018-09-09 12:15",
                  "obsReviewed": false,
                  "obsValid": true,
                  "sciName": "Larus delawarensis",
                  "speciesCode": "ribgul",
                },
                Object {
                  "comName": "Double-crested Cormorant",
                  "howMany": 4,
                  "lat": 39.7044793,
                  "lng": -105.0857735,
                  "locId": "L1743685",
                  "locName": "Belmar Park",
                  "locationPrivate": false,
                  "obsDt": "2018-09-09 12:15",
                  "obsReviewed": false,
                  "obsValid": true,
                  "sciName": "Phalacrocorax auritus",
                  "speciesCode": "doccor",
                },
                Object {
                  "comName": "Great Blue Heron",
                  "howMany": 1,
                  "lat": 39.7044793,
                  "lng": -105.0857735,
                  "locId": "L1743685",
                  "locName": "Belmar Park",
                  "locationPrivate": false,
                  "obsDt": "2018-09-09 12:15",
                  "obsReviewed": false,
                  "obsValid": true,
                  "sciName": "Ardea herodias",
                  "speciesCode": "grbher3",
                },
              ],
              "countryCode": "US",
              "lat": 39.7044793,
              "lng": -105.0857735,
              "locID": "L1743685",
              "locId": "L1743685",
              "locName": "Belmar Park",
              "subnational1Code": "US-CO",
              "subnational2Code": "US-CO-059",
            },
          ]
    }
    loading={false}
/>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <withRouter()
          currentPage="Nearby Hotspots"
/>,
        <Wrapper />,
        <main
          className="main-content"
>
          <Link
                    className="hotspot"
                    replace={false}
                    to="/hotspots/L1743685"
          >
                    Belmar Park
          </Link>
</main>,
      ],
      "className": "hotspots-list",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "currentPage": "Nearby Hotspots",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {},
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <Link
              className="hotspot"
              replace={false}
              to="/hotspots/L1743685"
>
              Belmar Park
</Link>,
          ],
          "className": "main-content",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": "L1743685",
            "nodeType": "class",
            "props": Object {
              "children": "Belmar Park",
              "className": "hotspot",
              "replace": false,
              "to": "/hotspots/L1743685",
            },
            "ref": null,
            "rendered": "Belmar Park",
            "type": [Function],
          },
        ],
        "type": "main",
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <withRouter()
            currentPage="Nearby Hotspots"
/>,
          <Wrapper />,
          <main
            className="main-content"
>
            <Link
                        className="hotspot"
                        replace={false}
                        to="/hotspots/L1743685"
            >
                        Belmar Park
            </Link>
</main>,
        ],
        "className": "hotspots-list",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "currentPage": "Nearby Hotspots",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {},
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <Link
                className="hotspot"
                replace={false}
                to="/hotspots/L1743685"
>
                Belmar Park
</Link>,
            ],
            "className": "main-content",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": "L1743685",
              "nodeType": "class",
              "props": Object {
                "children": "Belmar Park",
                "className": "hotspot",
                "replace": false,
                "to": "/hotspots/L1743685",
              },
              "ref": null,
              "rendered": "Belmar Park",
              "type": [Function],
            },
          ],
          "type": "main",
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
    "attachTo": undefined,
    "hydrateIn": undefined,
  },
}
`;

exports[`HotspotsList component should match the snapshot when the data is still loading 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <HotspotsList
    getNearbyHotspots={[Function]}
    hotspots={Array []}
    loading={true}
/>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <withRouter()
          currentPage="Nearby Hotspots"
/>,
        false,
        <main
          className="main-content"
>
          <LoadingSpinner />
</main>,
      ],
      "className": "hotspots-list",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "currentPage": "Nearby Hotspots",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      false,
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <LoadingSpinner />,
          "className": "main-content",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {},
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        "type": "main",
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <withRouter()
            currentPage="Nearby Hotspots"
/>,
          false,
          <main
            className="main-content"
>
            <LoadingSpinner />
</main>,
        ],
        "className": "hotspots-list",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "currentPage": "Nearby Hotspots",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        false,
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <LoadingSpinner />,
            "className": "main-content",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {},
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          "type": "main",
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
    "attachTo": undefined,
    "hydrateIn": undefined,
  },
}
`;
